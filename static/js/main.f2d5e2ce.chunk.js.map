{"version":3,"sources":["useStorybook.tsx","chapters/useState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["storybookContext","React","createContext","StorybookProvider","Provider","useStorybookContext","useContext","Chapters","key","Component","react_default","a","createElement","character","Storybook","_ref","children","_useState","useState","_useState2","Object","slicedToArray","currentChapter","setCurrentChapter","value","TableOfContents","_ref2","className","map","_ref3","Fragment","onClick","concat","CurrentChapter","_ref4","chapterHasComponent","find","_ref5","App","_useStorybook","initialChapter","_useState3","_useState4","useStorybook","_useStorybook2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPASMA,SAAmBC,IAAMC,cAAoC,OACtDC,EAAoBH,EAAiBI,SACrCC,EAAsB,kBAAMC,qBAAWN,IAE9CO,EAAW,CACf,CAAEC,IAAK,WAAYC,UCZa,WAChC,OAAOC,EAAAC,EAAAC,cAAA,wBDWiCC,UAAW,cACnD,CAAEL,IAAK,YAAaK,UAAW,mBAC/B,CAAEL,IAAK,aAAcK,UAAW,kBAChC,CAAEL,IAAK,aAAcK,UAAW,OAChC,CAAEL,IAAK,cAAeK,UAAW,UACjC,CAAEL,IAAK,UAAWK,UAAW,WAC7B,CAAEL,IAAK,SAAUK,UAAW,SAC5B,CAAEL,IAAK,sBAAuBK,UAAW,UACzC,CAAEL,IAAK,kBAAmBK,UAAW,UACrC,CAAEL,IAAK,gBAAiBK,UAAW,UAG/BC,EAAsB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EACAC,mBAAS,YADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrCK,EADqCH,EAAA,GACrBI,EADqBJ,EAAA,GAE5C,OACET,EAAAC,EAAAC,cAACT,EAAD,CAAmBqB,MAAO,CAAEF,iBAAgBC,sBACzCP,IAKDS,EAA4B,WAAM,IAAAC,EACQrB,IAAtCiB,EAD8BI,EAC9BJ,eAAgBC,EADcG,EACdH,kBACxB,OACEb,EAAAC,EAAAC,cAAA,MAAIe,UAAU,qBACXpB,EAASqB,IAAI,SAAAC,GAAwB,IAArBrB,EAAqBqB,EAArBrB,IAAKK,EAAgBgB,EAAhBhB,UACpB,OACEH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACEpB,EAAAC,EAAAC,cAAA,MACEmB,QAAS,kBAAMR,EAAkBf,IACjCmB,UAAS,MAAAK,OAAQxB,IAAQc,EAAiB,SAAW,KAEpDd,GAEHE,EAAAC,EAAAC,cAAA,MACEmB,QAAS,kBAAMR,EAAkBf,IACjCmB,UAAS,MAAAK,OAAQxB,IAAQc,EAAiB,SAAW,KAFvD,MAIMT,QASZoB,EAA2B,WAAM,IAAAC,EACS7B,IAAtCiB,EAD6BY,EAC7BZ,eACFa,GAF+BD,EACbX,kBACIhB,EAAS6B,KACnC,SAAAC,GAAA,OAAAA,EAAG7B,MAAkBc,KAEvB,GAAIa,GAAuBA,EAAoB1B,UAAW,CACxD,IAAMA,EAAY0B,EAAoB1B,UACtC,OAAOC,EAAAC,EAAAC,cAACH,EAAD,MAEP,OAAOC,EAAAC,EAAAC,cAAA,6BAAqBU,IErDjBgB,SAbO,WAAM,IAAAC,EFsEA,SAC1BC,GACmC,IAAAC,EACSvB,mBAASsB,GADlBE,EAAAtB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GAEnC,OAFmCC,EAAA,GAAAA,EAAA,GAE5B,CAAC5B,EAAWmB,EAAgBR,GEzEkBkB,CAAa,YADxCC,EAAAxB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GACnBzB,EADmB8B,EAAA,GACRX,EADQW,EAAA,GACQnB,EADRmB,EAAA,GAE1B,OACElC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAA,MAAIe,UAAU,WAAd,wCACAjB,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACqB,EAAD,UCCYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f2d5e2ce.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { UseState } from \"./chapters\";\nimport \"./storybook.css\";\n\ntype storybookContextType = {\n  currentChapter: string;\n  setCurrentChapter: any;\n} | null;\n\nconst storybookContext = React.createContext<storybookContextType>(null);\nexport const StorybookProvider = storybookContext.Provider;\nexport const useStorybookContext = () => useContext(storybookContext);\n\nconst Chapters = [\n  { key: \"useState\", Component: UseState, character: \"Snow White\" },\n  { key: \"useEffect\", character: \"Prince Charming\" },\n  { key: \"useContext\", character: \"The Evil Queen\" },\n  { key: \"useReducer\", character: \"Doc\" },\n  { key: \"useCallback\", character: \"Sneezy\" },\n  { key: \"useMemo\", character: \"Bashful\" },\n  { key: \"useRef\", character: \"Happy\" },\n  { key: \"useImperativeHandle\", character: \"Grumpy\" },\n  { key: \"useLayoutEffect\", character: \"Sleepy\" },\n  { key: \"useDebugValue\", character: \"Dopey\" }\n];\n\nconst Storybook: React.FC = ({ children }) => {\n  const [currentChapter, setCurrentChapter] = useState(\"useState\");\n  return (\n    <StorybookProvider value={{ currentChapter, setCurrentChapter }}>\n      {children}\n    </StorybookProvider>\n  );\n};\n\nconst TableOfContents: React.FC = () => {\n  const { currentChapter, setCurrentChapter } = useStorybookContext() as any;\n  return (\n    <dl className=\"table-of-contents\">\n      {Chapters.map(({ key, character }) => {\n        return (\n          <>\n            <dt\n              onClick={() => setCurrentChapter(key)}\n              className={`dt ${key === currentChapter ? \"active\" : \"\"}`}\n            >\n              {key}\n            </dt>\n            <dd\n              onClick={() => setCurrentChapter(key)}\n              className={`dd ${key === currentChapter ? \"active\" : \"\"}`}\n            >\n              as {character}\n            </dd>\n          </>\n        );\n      })}\n    </dl>\n  );\n};\n\nconst CurrentChapter: React.FC = () => {\n  const { currentChapter, setCurrentChapter } = useStorybookContext() as any;\n  const chapterHasComponent = Chapters.find(\n    ({ key }) => key === currentChapter\n  );\n  if (chapterHasComponent && chapterHasComponent.Component) {\n    const Component = chapterHasComponent.Component;\n    return <Component />;\n  } else {\n    return <p>Current Chapter: {currentChapter}</p>;\n  }\n};\n\nexport const useStorybook = (\n  initialChapter: string\n): [React.FC, React.FC, React.FC] => {\n  const [currentChapter, setCurrentChapter] = useState(initialChapter);\n  return [Storybook, CurrentChapter, TableOfContents];\n};\n","import React from \"react\";\n\nexport const UseState: React.FC = () => {\n  return <p>Snow White</p>;\n};\n","import React from \"react\";\nimport { useStorybook } from \"./useStorybook\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [Storybook, CurrentChapter, TableOfContents] = useStorybook(\"useState\");\n  return (\n    <div className=\"app\">\n      <h1 className=\"heading\">Snow White and the Seven React Hooks</h1>\n      <Storybook>\n        <TableOfContents />\n        <CurrentChapter />\n      </Storybook>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}